
The creation of the connectors/listeners is flaky...can be re-run and everything works okay.

Next steps:
change persistence of lineage into mongo
change persistence of lineage into SQL
Queries required:
How to trace the tainted records in a lineage tree (graph / doc store / SQL store)
// get the tainted record
MATCH(tainted:RecordDescriptor{rowId:"997fece2-8dad-4b5b-91c5-b256dabc59ce"}) Return tainted

MATCH(tainted:RecordDescriptor{rowId:"997fece2-8dad-4b5b-91c5-b256dabc59ce"})
CALL apoc.path.subgraphNodes(tainted, {maxLevel:-1, relationshipFilter:'PARENT_OF>'}) YIELD node as taintedTree
return taintedTree

Add version information into the system...both in the source data and the lineage data
Slides


8<----------8<

docker-compose down
docker volume rm lineage_dbdata
rm neo/data
docker-compose up
./setup-connectors.sh
run the cdc listener component
the listener should pick up on all the original participant inserts from the setup scripts as nodes
check at localhost:7474 (default : neo4j/neo4j altered : neo4j/secret)
//all nodes:
MATCH (n) RETURN n;
//the whole graph
Match (n)-[r]->(m) Return n,r,m


DONE:
The only connector that works and persists is the orders connector.
Try just creating the summary one and manually inserting the data, see if this is picked up with the cdc-listener, which
just listens to one topic (remove from the cdc listener)
The name of the topic may be incorrect, try the participant listener also
8<---------->8

The relationships aren't getting persisted...maybe the parents are empty?

/* delete everything including relationships: */
MATCH (n) detach delete  n;

/* Get all the nodes: */
MATCH (n) RETURN n;

/* Get the entire graph */
Match (n)-[r]->(m) Return n,r,m

/* all parents of an order*/
match(order:RecordDescriptor {RowId : "Dave"})-[*1..4]-(parents) return order, parents

/* immediate parents of an order */
MATCH (child {RowId: "Dave"})<-[:PARENT_OF]-(parents) RETURN parents, child

/* all children of a node */
match(pare:RecordDescriptor{RowId:"DaveTable2" })-[*1..1]-(children) return pare, children

/* immediate children of a node */
MATCH (child {RowId: "DaveTable2"})-[:PARENT_OF]-(children) RETURN children, child




Diagram of what we're doing from a business perspective
Design goals (application knows about lineage, but doesn't care how it's stored or the catalogue is updated)
Separation of lineage storage from the main application storage (could just use pointers to the record_ids)

Structure of a lineage record

Turn on debezium
what the main program is doing
what the summarisation is doing
The SQL of summarisation (including the other aggregation function)
run the summarisation

Show the debezium output that it has been listened in to the records being inserted

Run up something to connect to the debezium topics and insert them into a graph DB


Recursion in SQL:
https://medium.com/swlh/recursion-in-sql-explained-graphically-679f6a0f143b
https://modern-sql.com/caniuse/with_recursive_(top_level)
Recursion in Mongo:
https://stackoverflow.com/questions/42787293/mongodb-recursive-query
https://docs.mongodb.com/manual/reference/operator/aggregation/graphLookup/




Next step:
new module that runs the summary SQL

new module to hold some kind of tree for the lineage (include a starting point of lineage)
Add the lineage into the queries

table name is not working but ignore it


Next step:
https://spring.io/guides/gs/accessing-data-jpa/

Then get some meaningful orders into the DB


docker-compose exec kafka bash
./bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
./bin/kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic lineage-server.lineage.order --from-beginning
./bin/kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic lineage-server.lineage.order --from-beginning


This works!:
curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d ' {"name": "orders-connector",              "config": {"connector.class": "io.debezium.connector.postgresql.PostgresConnector", "database.hostname": "postgres", "database.port": "5432", "database.user": "postgres", "database.password": "development", "database.dbname": "postgres", "database.server.name": "lineage-server", "table.whitelist": "lineage.order"}}  '
curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d ' {"name": "participant-summary-connector", "config": {"connector.class": "io.debezium.connector.postgresql.PostgresConnector", "database.hostname": "postgres", "database.port": "5432", "database.user": "postgres", "database.password": "development", "database.dbname": "postgres", "database.server.name": "lineage-server", "table.whitelist": "lineage.participant_summary"}}  '
curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d ' {"name": "participant-type-summary-connector", "config": {"connector.class": "io.debezium.connector.postgresql.PostgresConnector", "database.hostname": "postgres", "database.port": "5432", "database.user": "postgres", "database.password": "development", "database.dbname": "postgres", "database.server.name": "lineage-server", "table.whitelist": "lineage.participant_type_summary"}}  '
curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d ' {"name": "participant-connector",         "config": {"connector.class": "io.debezium.connector.postgresql.PostgresConnector", "database.hostname": "postgres", "database.port": "5432", "database.user": "postgres", "database.password": "development", "database.dbname": "postgres", "database.server.name": "lineage-server", "table.whitelist": "lineage.participant"}}  '


curl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" localhost:8083/connectors/ -d ' {"name": "orders-connector", "config": {"connector.class": "io.debezium.connector.postgresql.PostgresConnector", "transforms": "unwrap", "transforms.unwrap.type":"io.debezium.transforms.ExtractNewRecordState", "database.hostname": "postgres", "database.port": "5432", "database.user": "postgres", "database.password": "development", "database.dbname": "postgres", "database.server.name": "lineage-server", "table.whitelist": "lineage.order"}}  '


curl -H "Accept:application/json" localhost:8083/
curl -H "Accept:application/json" localhost:8083/connectors/

we'll want to specify the connectors within a config file within the container

port to use postgres instead and use flyway with that
need to install postgresql add-ons that allow debezium to be used

git clone https://github.com/debezium/docker-images.git
./build-postgres.sh 13-alpine
